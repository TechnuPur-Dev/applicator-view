generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "omitApi"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       Int
  createdAt DateTime @default(now())
  expiredAt DateTime
}

model User {
  id                     Int                     @id @default(autoincrement())
  profileImage           String?
  thumbnailProfileImage  String?
  firstName              String?
  lastName               String?
  fullName               String?                 @default("")
  email                  String?                 @unique
  phoneNumber            String?
  password               String?
  role                   UserRole
  businessName           String?
  experience             Decimal?
  address1               String?
  address2               String?
  stateId                Int?
  county                 String?
  township               String?
  zipCode                String?
  bio                    String?
  additionalInfo         String?
  profileStatus          ProfileStatus           @default(INCOMPLETE)
  state                  State?                  @relation(fields: [stateId], references: [id])
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  joiningDate            DateTime?
  applicators            ApplicatorGrower[]      @relation("Applicators")
  growers                ApplicatorGrower[]      @relation("Growers")
  applicatorWorkers      ApplicatorWorker[]      @relation("ApplicatorToWorkers")
  assignedWorkers        ApplicatorWorker[]      @relation("WorkerAssignments")
  farmsCreated           Farm[]                  @relation("FarmCreator")
  farms                  Farm[]                  @relation("FarmGrower")
  farmPermissions        FarmPermission[]
  fieldsCreated          Field[]                 @relation("FieldCreator")
  applicatorJobs         Job[]                   @relation("ApplicatorJob")
  fieldWorkerJobs        Job[]                   @relation("FieldWorkerJob")
  growerJobs             Job[]                   @relation("GrowerJob")
  supportTicketsAssigned SupportTicket[]         @relation("SupportTicketAssigned")
  supportTicketsCreated  SupportTicket[]         @relation("SupportTicketCreated")
  tableViews             TableView[]
  warrantyRegistrations  WarrantyRegistration[]
  Notification           Notification[]
  Product                Product[]
  DeviceToken            DeviceToken[]
  Bid                    Bid[]
  ForecastCity           ForecastCity[]
  JobActivity            JobActivity[]
  applicatorUser         ApplicatorUser[]        @relation("ApplicatorToUsers")
  assignedUsers          ApplicatorUser[]        @relation("UserToApplicators")
  SupportTicketActivity  SupportTicketActivity[]
}

model ApplicatorWorker {
  id                     Int          @id @default(autoincrement())
  applicatorId           Int
  workerId               Int
  workerType             WorkerType
  pilotPestLicenseNumber String?
  pilotLicenseNumber     String?
  businessLicenseNumber  String?
  planeOrUnitNumber      String?
  // perAcrePricing         Decimal?
  percentageFee          Decimal?
  dollarPerAcre          Decimal?
  autoAcceptJobs         Boolean      @default(false)
  canViewPricingDetails  Boolean      @default(false)
  code                   String?
  lastLogin              DateTime?
  isActive               Boolean      @default(true)
  inviteStatus           InviteStatus @default(PENDING)
  inviteToken            String?      @unique
  expiresAt              DateTime? // Optional: Invite expiration time
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  applicator             User         @relation("ApplicatorToWorkers", fields: [applicatorId], references: [id])
  worker                 User         @relation("WorkerAssignments", fields: [workerId], references: [id])

  @@unique([applicatorId, workerId])
}

// TODO: remove email because the flow is updated now 
model ApplicatorGrower {
  id                     Int              @id @default(autoincrement())
  applicatorId           Int?
  growerId               Int
  applicatorFirstName    String?
  applicatorLastName     String?
  growerFirstName        String?
  growerLastName         String?
  inviteStatus           InviteStatus     @default(PENDING)
  inviteToken            String?          @unique
  expiresAt              DateTime? // Optional: Invite expiration time
  inviteInitiator        InviteInitiator? // NEW FIELD: Who sent the invite?
  isArchivedByApplicator Boolean          @default(false)
  isArchivedByGrower     Boolean          @default(false)
  canManageFarms         Boolean          @default(false)
  isDeletedByApplicator  Boolean          @default(false)
  isDeletedByGrower      Boolean          @default(false)
  applicatorDeletedTill  DateTime? // Timestamp for when the applicator deleted till
  growerDeletedTill      DateTime? // Timestamp for when the grower deleted till
  email                  String? // Store invited email to handle the case when applicator does notexists in the system

  applicator User? @relation("Applicators", fields: [applicatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grower     User  @relation("Growers", fields: [growerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  pendingFarmPermission PendingFarmPermission[]
  Notification          Notification[]

  @@unique([applicatorId, growerId])
}

model Farm {
  id                    Int                     @id @default(autoincrement())
  name                  String?
  farmImageUrl          String?
  createdById           Int
  growerId              Int
  stateId               Int
  county                String?
  township              String?
  zipCode               String?
  isActive              Boolean
  config                Json?
  state                 State                   @relation(fields: [stateId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             User                    @relation("FarmCreator", fields: [createdById], references: [id], onDelete: Cascade)
  grower                User                    @relation("FarmGrower", fields: [growerId], references: [id], onDelete: Cascade)
  permissions           FarmPermission[]
  fields                Field[]
  jobs                  Job[]
  pendingFarmPermission PendingFarmPermission[]
}

model FarmPermission {
  id           Int      @id @default(autoincrement())
  farmId       Int
  applicatorId Int
  canView      Boolean  @default(true)
  canEdit      Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  applicator User @relation(fields: [applicatorId], references: [id], onDelete: Cascade)
  farm       Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@unique([farmId, applicatorId]) // Ensures only one permission per user per farm
}

model PendingFarmPermission {
  id        Int      @id @default(autoincrement())
  farmId    Int
  inviteId  Int
  canView   Boolean  @default(true)
  canEdit   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  farm   Farm             @relation(fields: [farmId], references: [id], onDelete: Cascade)
  invite ApplicatorGrower @relation(fields: [inviteId], references: [id], onDelete: Cascade)

  @@unique([farmId, inviteId])
}

model Field {
  id            Int        @id @default(autoincrement())
  name          String?
  fieldImageUrl String?
  crop          String?
  acres         Decimal?
  legal         String?
  latitude      String?
  longitude     String?
  createdById   Int
  farmId        Int
  config        Json?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  createdBy     User       @relation("FieldCreator", fields: [createdById], references: [id], onDelete: Cascade)
  farm          Farm       @relation(fields: [farmId], references: [id], onDelete: Cascade)
  jobs          FieldJob[]
}

model TableView {
  id          Int       @id @default(autoincrement())
  createdById Int
  tableName   ViewTable
  viewName    String?
  config      Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

model Job {
  id                  Int                 @id @default(autoincrement())
  title               String
  type                JobType
  source              JobSource
  status              JobStatus           @default(PENDING)
  growerId            Int?
  applicatorId        Int?
  fieldWorkerId       Int? // Pilot assigned to this job
  startDate           DateTime?
  endDate             DateTime?
  description         String?
  farmId              Int
  sensitiveAreas      String?
  adjacentCrops       String?
  specialInstructions String?
  attachments         Json?
  // rejectionReason     String? // General job rejection reason by grower/applicator
  // pilotRejectionReason String? // Pilot's rejection reason
  // pilotJobStatus       PilotJobStatus? // Pilot's rejection reason
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  fields              FieldJob[]
  applicator          User?               @relation("ApplicatorJob", fields: [applicatorId], references: [id])
  farm                Farm                @relation(fields: [farmId], references: [id], onDelete: Cascade)
  fieldWorker         User?               @relation("FieldWorkerJob", fields: [fieldWorkerId], references: [id])
  grower              User?               @relation("GrowerJob", fields: [growerId], references: [id])
  applicationFees     JobApplicationFee[]
  products            JobProduct[]
  supportTickets      SupportTicket[]
  Notification        Notification?
  Bid                 Bid[]
  jobActivities       JobActivity[]
  Invoice             Invoice?
}

model Bid {
  id           Int       @id @default(autoincrement())
  jobId        Int
  applicatorId Int
  status       BidStatus @default(PENDING) // PENDING, ACCEPTED, REJECTED
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  job         Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicator  User                @relation(fields: [applicatorId], references: [id], onDelete: Cascade)
  bidProducts BidProduct[]
  bidFees     BidApplicationFee[]

  @@unique([jobId, applicatorId]) // Ensures an applicator bids once per job
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model BidProduct {
  id          Int      @id @default(autoincrement())
  bidId       Int
  productId   Int
  bidRateAcre Decimal?
  bidPrice    Decimal?

  bid     Bid        @relation(fields: [bidId], references: [id], onDelete: Cascade)
  product JobProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([bidId])
}

model BidApplicationFee {
  id        Int     @id @default(autoincrement())
  bidId     Int
  feeId     Int
  bidAmount Decimal

  bid            Bid               @relation(fields: [bidId], references: [id], onDelete: Cascade)
  applicationFee JobApplicationFee @relation(fields: [feeId], references: [id], onDelete: Cascade)

  @@index([bidId])
}

model FieldJob {
  id          Int      @id @default(autoincrement())
  fieldId     Int
  jobId       Int
  actualAcres Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  field       Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([fieldId, jobId])
}

model JobProduct {
  id          Int          @id @default(autoincrement())
  jobId       Int
  name        String?
  productId   Int?
  perAcreRate Decimal?
  totalAcres  Decimal
  price       Decimal
  job         Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  product     Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)
  BidProduct  BidProduct[]

  @@index([jobId])
}

model JobApplicationFee {
  id                Int                 @id @default(autoincrement())
  jobId             Int
  description       String
  rateUoM           Decimal
  perAcre           Boolean
  job               Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)
  BidApplicationFee BidApplicationFee[]

  @@index([jobId])
}

model SupportTicket {
  id                    Int                     @id @default(autoincrement())
  createdById           Int
  subject               String                  @db.VarChar(255)
  description           String
  status                TicketStatus
  assigneeId            Int?
  jobId                 Int?
  category              TicketCategory
  priority              TicketPriority
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  assigneeUser          User?                   @relation("SupportTicketAssigned", fields: [assigneeId], references: [id], onDelete: Cascade)
  createdByUser         User                    @relation("SupportTicketCreated", fields: [createdById], references: [id], onDelete: Cascade)
  job                   Job?                    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  SupportTicketActivity SupportTicketActivity[]

  @@index([jobId])
}

model WarrantyRegistration {
  id                 Int           @id @default(autoincrement())
  imageUrl           String?
  serialNumber       String
  equipmentType      EquipmentType
  isRegistered       Boolean       @default(false)
  documentUrl        String?
  warrantyExpiration DateTime
  createdById        Int
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  createdByUser      User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

model Product {
  id                          Int             @id @default(autoincrement())
  baseProductName             String
  productName                 String
  code                        Int?
  category                    ProductCategory
  restrictedUse               Boolean         @default(false)
  epaRegistration             String?
  company                     String?
  inventoryUnit               ProductUnit
  appliedUnits                ProductUnit
  perAcreRate                 Float?
  density                     String?
  treatAsLiquid               Boolean         @default(false)
  canadSalesTax               Float?
  primaryNutrient             String?
  reentryInterval             Int?
  nutrients                   Json?
  jobPricePerMonth            Json            @default("{}")
  ticketPricePerMonth         Json            @default("{}")
  jobPrice                    Float           @default(0)
  ticketPrice                 Float           @default(0)
  personalProtectiveEquipment String?
  preHarvestInterval          String?
  comments                    String?
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  createdById                 Int
  craetedBy                   User            @relation(fields: [createdById], references: [id], onDelete: Cascade)
  JobProduct                  JobProduct[]
}

model State {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  counties County[]
  User     User[]
  Farm     Farm[]
}

model County {
  id        Int        @id @default(autoincrement())
  name      String
  stateId   Int
  state     State      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  townships Township[]

  @@unique([name, stateId])
}

model Township {
  id       Int    @id @default(autoincrement())
  name     String
  countyId Int
  county   County @relation(fields: [countyId], references: [id], onDelete: Cascade)

  @@unique([name, countyId])
}

model Notification {
  id       Int               @id @default(autoincrement())
  userId   Int
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviteId Int?
  invite   ApplicatorGrower? @relation(fields: [inviteId], references: [id], onDelete: Cascade)

  type   NotificationType
  isRead Boolean          @default(false)

  // Nullable foreign keys for referencing related entities
  jobId Int? @unique // Only set if related to a job
  job   Job? @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model DeviceToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ForecastCity {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobActivity {
  id            Int       @id @default(autoincrement())
  jobId         Int // Link to the Job
  changedById   Int // User who changed the status (Applicator, Pilot, or Grower)
  changedByRole UserRole // Enum: APPLICATOR, GROWER, PILOT
  oldStatus     JobStatus
  newStatus     JobStatus
  reason        String? // Optional: Store rejection reasons if applicable
  createdAt     DateTime  @default(now())

  job       Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  changedBy User @relation(fields: [changedById], references: [id])
}

model ApplicatorUser {
  id           Int      @id @default(autoincrement())
  applicatorId Int
  userId       Int
  createdAt    DateTime @default(now())
  inviteToken  String?  @unique

  applicator  User                       @relation("ApplicatorToUsers", fields: [applicatorId], references: [id], onDelete: Cascade)
  user        User                       @relation("UserToApplicators", fields: [userId], references: [id], onDelete: Cascade)
  permissions ApplicatorUserPermission[]

  @@unique([applicatorId, userId]) // Prevent duplicate entries
}

model Permission {
  id   Int            @id @default(autoincrement())
  name PermissionType

  applicatorUserPermissions ApplicatorUserPermission[]
}

model ApplicatorUserPermission {
  id           Int     @id @default(autoincrement())
  userId       Int
  permissionId Int
  canView      Boolean @default(true)
  canEdit      Boolean @default(false)

  user       ApplicatorUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission     @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId]) // Ensure a user has unique permissions per applicator
}

model SupportTicketActivity {
  id          Int          @id @default(autoincrement())
  ticketId    Int // Link to the support ticket
  updatedById Int? // User who changed the status (Applicator, Pilot, or Grower)
  oldStatus   TicketStatus
  newStatus   TicketStatus
  reason      String? // Optional: Store rejection reasons if applicable
  createdAt   DateTime     @default(now())

  supportTicket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  updatedBy     User?         @relation(fields: [updatedById], references: [id])
}

model Invoice {
  id          Int       @id @default(autoincrement())
  jobId       Int       @unique
  totalAmount Decimal
  issuedAt    DateTime  @default(now())
  paidAt      DateTime?

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

enum PermissionType {
  // Dashboard
  DASHBOARD

  // Jobs
  JOBS
  MY_JOBS
  BIDDING_JOBS
  PENDING_APPROVALS
  REJECTED_JOBS

  // Growers
  GROWERS
  MY_GROWERS
  PENDING_INVITES

  // Equipment
  EQUIPMENT
  WARRANTY_REGISTRATION
  SUPPORT_TICKETS
  FORUM

  // Reports
  REPORTS

  // Pilots/Operators
  PILOTS_OPERATORS
  MY_PILOTS_OPERATORS
  PILOT_PENDING_INVITES

  // Settings
  SETTINGS
  PRODUCTS
  INTEGRATIONS
  USER_ADMIN
}

enum NotificationType {
  JOB_REQUEST
  JOB_ASSIGNED
  JOB_COMPLETED
  JOB_REJECTED
  BID_PLACED
  BID_ACCEPTED
  PAYMENT_RECEIVED
  INVOICE_GENERATED
  FIELD_UPDATED
  SYSTEM_ALERT
  ACCOUNT_INVITATION
  ACCEPT_INVITE
  REJECT_INVITE
}

enum ProfileStatus {
  INCOMPLETE
  COMPLETE
}

enum WorkerType {
  PILOT
  DRONE_OPERATOR
  FIELD_OPERATOR
  SCOUT
  MECHANIC
  ADVISOR
  COORDINATOR
}

enum ProductCategory {
  INSECTICIDE
  FUNGICIDE
  ADJUVANT
  HERBICIDE
  PGR
  DRY_FERTILIZER
  LIQUID_FERTILIZER
  SEED
  OTHER
}

enum ProductUnit {
  GALLON
  PINT
  QUART
  FLOZ
  TON
  POUND
  OUNCE
  CASE
  BAG
  BULK_BAG
  JUG
  UNIT
}

enum EquipmentType {
  DRONE
  TRACTOR
  SPRAYER
  OTHER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UserRole {
  GROWER
  APPLICATOR
  WORKER
  APPLICATOR_USER
}

enum InviteStatus {
  NOT_SENT
  PENDING
  ACCEPTED
  REJECTED
  DELETED_BY_APPLICATOR
  DELETED_BY_GROWER
}

enum ViewTable {
  APPLICATOR
  GROWER
  JOB
  PENDING_JOB
  REJECTED_JOB
  PRODUCT
  WORKER
  USER_ADMIN
}

enum JobType {
  AERIAL
  GROUND
}

enum JobSource {
  GROWER
  APPLICATOR
  BIDDING
}

enum JobStatus {
  PENDING
  REJECTED
  READY_TO_SPRAY
  ASSIGNED_TO_PILOT
  PILOT_REJECTED
  IN_PROGRESS
  SPRAYED
  INVOICED
  PAID
  OPEN_FOR_BIDDING
}

enum InviteInitiator {
  APPLICATOR
  GROWER
}

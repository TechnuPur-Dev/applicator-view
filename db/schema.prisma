generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "omitApi"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       Int
  createdAt DateTime @default(now())
  expiredAt DateTime
}

enum ProfileStatus {
  INCOMPLETE
  COMPLETE
}

model User {
  id                    Int           @id @default(autoincrement())
  profileImage          String?
  thumbnailProfileImage String?
  firstName             String?
  lastName              String?
  fullName              String?       @default("")
  email                 String?       @unique
  phoneNumber           String?
  password              String?
  role                  UserRole
  businessName          String?
  experience            Decimal?
  address1              String?
  address2              String?
  state                 String?
  county                String?
  township              String?
  zipCode               String?
  bio                   String?
  additionalInfo        String?
  profileStatus         ProfileStatus @default(INCOMPLETE)

  applicators     ApplicatorGrower[] @relation("Applicators")
  growers         ApplicatorGrower[] @relation("Growers")
  farmsCreated    Farm[]             @relation("FarmCreator")
  farms           Farm[]             @relation("FarmGrower")
  fieldsCreated   Field[]            @relation("FieldCreator")
  tableViews      TableView[]
  applicatorJobs  Job[]              @relation("ApplicatorJob")
  growerJobs      Job[]              @relation("GrowerJob")
  fieldWorkerJobs Job[]              @relation("FieldWorkerJob")

  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  FarmPermission        FarmPermission[]
  SupportTicketCreated  SupportTicket[]  @relation("SupportTicketCreated")
  SupportTicketAssigned SupportTicket[]  @relation("SupportTicketAssigned")
}

model ApplicatorGrower {
  id                     Int          @id @default(autoincrement())
  applicatorId           Int
  growerId               Int
  applicatorFirstName    String?
  applicatorLastName     String?
  growerFirstName        String?
  growerLastName         String?
  inviteStatus           InviteStatus @default(NOT_SENT)
  isArchivedByApplicator Boolean      @default(false)
  isArchivedByGrower     Boolean      @default(false)
  canManageFarms         Boolean      @default(false)

  applicator User @relation("Applicators", fields: [applicatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grower     User @relation("Growers", fields: [growerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([applicatorId, growerId])
}

model Farm {
  id          Int              @id @default(autoincrement())
  name        String?
  createdById Int
  growerId    Int
  state       String?
  county      String?
  township    String?
  zipCode     String?
  isActive    Boolean
  permissions FarmPermission[]
  jobs        Job[]

  grower    User    @relation("FarmGrower", fields: [growerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy User    @relation("FarmCreator", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fields    Field[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FarmPermission {
  id           Int     @id @default(autoincrement())
  farmId       Int
  applicatorId Int
  canView      Boolean @default(true)
  canEdit      Boolean

  farm       Farm @relation(fields: [farmId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  applicator User @relation(fields: [applicatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Field {
  id          Int      @id @default(autoincrement())
  name        String?
  crop        String?
  acres       Decimal?
  legal       String?
  latitude    String?
  longitude   String?
  createdById Int
  farmId      Int

  createdBy User       @relation("FieldCreator", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  farm      Farm       @relation(fields: [farmId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobs      FieldJob[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TableView {
  id          Int       @id @default(autoincrement())
  createdById Int
  tableName   ViewTable
  config      Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Job {
  id                  Int                 @id @default(autoincrement())
  title               String
  type                JobType
  source              JobSource
  status              JobStatus           @default(TO_BE_MAPPED)
  growerId            Int?
  applicatorId        Int?
  fieldWorkerId       Int?
  startDate           DateTime?
  endDate             DateTime?
  description         String?
  farmId              Int
  fields              FieldJob[]
  sensitiveAreas      String?
  adjacentCrops       String?
  products            JobProduct[]
  applicationFees     JobApplicationFee[]
  specialInstructions String?
  attachments         Json?

  grower         User?           @relation("GrowerJob", fields: [growerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  applicator     User?           @relation("ApplicatorJob", fields: [applicatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  fieldWorker    User?           @relation("FieldWorkerJob", fields: [fieldWorkerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  farm           Farm            @relation(fields: [farmId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supportTickets SupportTicket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FieldJob {
  id          Int  @id @default(autoincrement())
  fieldId     Int
  jobId       Int
  actualAcres Int?

  field Field @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  job   Job   @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fieldId, jobId])
}

model JobProduct {
  id          Int     @id @default(autoincrement())
  jobId       Int
  name        String
  ratePerAcre Decimal
  totalAcres  Decimal
  price       Decimal

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([jobId])
}

model JobApplicationFee {
  id          Int     @id @default(autoincrement())
  jobId       Int
  description String
  rateUoM     Decimal
  perAcre     Boolean

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([jobId]) // Explicit index for performance
}

model SupportTicket {
  id          Int      @id @default(autoincrement())
  createdById Int
  subject     String    @db.VarChar(255) // Limits subject length for better database efficiency
  description String
  status      TicketStatus
  assigneeId  Int?
  jobId       Int?
  category    TicketCategory
  priority    TicketPriority

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdByUser User  @relation("SupportTicketCreated", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assigneeUser  User? @relation("SupportTicketAssigned", fields: [assigneeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  job           Job?  @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([jobId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}


enum UserRole {
  GROWER
  APPLICATOR
  WORKER
}

enum InviteStatus {
  NOT_SENT
  PENDING
  ACCEPTED
  REJECTED
}

enum ViewTable {
  GROWER
  Job
}

enum JobType {
  AERIAL
  GROUND
}

enum JobSource {
  GROWER
  APPLICATOR
  BIDDING
}

enum JobStatus {
  TO_BE_MAPPED
  READY_TO_SPRAY
  SPRAYED
  INVOICED
  PAID
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "omitApi"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       Int
  createdAt DateTime @default(now())
  expiredAt DateTime
}

model User {
  id                     Int                     @id @default(autoincrement())
  profileImage           String?
  thumbnailProfileImage  String?
  firstName              String?
  lastName               String?
  fullName               String?                 @default("")
  email                  String?                 @unique
  // email                  String?
  phoneNumber            String?
  password               String?
  role                   UserRole
  businessName           String?
  experience             Decimal?
  address1               String?
  address2               String?
  county                 String?
  township               String?
  zipCode                String?
  bio                    String?
  additionalInfo         String?
  profileStatus          ProfileStatus           @default(INCOMPLETE)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  stateId                Int?
  joiningDate            DateTime?
  lastViewedAt           DateTime? // To handle notifications count
  isActive               Boolean                 @default(true)
  autoAcceptInvite       Boolean                 @default(true) // To automatically accept invites
  minDollarPerAcre       Decimal? // e.g., $15.00 To automatically accept invites
  minPercentageFee       Decimal? // e.g., 20% To automatically accept invites
  applicators            ApplicatorGrower[]      @relation("Applicators")
  growers                ApplicatorGrower[]      @relation("Growers")
  applicatorUser         ApplicatorUser[]        @relation("ApplicatorToUsers")
  assignedUsers          ApplicatorUser[]        @relation("UserToApplicators")
  applicatorWorkers      ApplicatorWorker[]      @relation("ApplicatorToWorkers")
  assignedWorkers        ApplicatorWorker[]      @relation("WorkerAssignments")
  Bid                    Bid[]
  DeviceToken            DeviceToken[]
  farmsCreated           Farm[]                  @relation("FarmCreator")
  farms                  Farm[]                  @relation("FarmGrower")
  farmPermissions        FarmPermission[]
  fieldsCreated          Field[]                 @relation("FieldCreator")
  ForecastCity           ForecastCity[]
  applicatorJobs         Job[]                   @relation("ApplicatorJob")
  fieldWorkerJobs        Job[]                   @relation("FieldWorkerJob")
  growerJobs             Job[]                   @relation("GrowerJob")
  JobActivity            JobActivity[]
  Notification           Notification[]
  Product                Product[]
  supportTicketsAssigned SupportTicket[]         @relation("SupportTicketAssigned")
  supportTicketsCreated  SupportTicket[]         @relation("SupportTicketCreated")
  SupportTicketActivity  SupportTicketActivity[]
  tableViews             TableView[]
  state                  State?                  @relation(fields: [stateId], references: [id])
  warrantyRegistrations  WarrantyRegistration[]
  AdminPermission        AdminPermission[]
  ActivityLog            ActivityLog[]
  Certification          Certification[]
  Equipment              Equipment[]
  ConnectedAccount       ConnectedAccount[]
}

model ApplicatorWorker {
  id                     Int            @id @default(autoincrement())
  applicatorId           Int
  workerId               Int
  workerType             WorkerType
  pilotLicenseNumber     String?
  businessLicenseNumber  String?
  planeOrUnitNumber      String?
  percentageFee          Decimal?
  dollarPerAcre          Decimal?
  autoAcceptJobs         Boolean        @default(false)
  canViewPricingDetails  Boolean        @default(false)
  code                   String?
  lastLogin              DateTime?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  inviteStatus           InviteStatus   @default(PENDING)
  isActive               Boolean        @default(true)
  pilotPestLicenseNumber String?
  inviteToken            String?        @unique
  expiresAt              DateTime?
  applicator             User           @relation("ApplicatorToWorkers", fields: [applicatorId], references: [id])
  worker                 User           @relation("WorkerAssignments", fields: [workerId], references: [id])
  Notification           Notification[]

  @@unique([applicatorId, workerId])
}

model ApplicatorGrower {
  id                         Int              @id @default(autoincrement())
  applicatorId               Int?
  growerId                   Int
  applicatorFirstName        String?
  applicatorLastName         String?
  growerFirstName            String?
  growerLastName             String?
  inviteStatus               InviteStatus     @default(PENDING)
  inviteToken                String?          @unique
  expiresAt                  DateTime? // Optional: Invite expiration time
  inviteInitiator            InviteInitiator? // NEW FIELD: Who sent the invite?
  isArchivedByApplicator     Boolean          @default(false)
  isArchivedByGrower         Boolean          @default(false)
  canManageFarms             Boolean          @default(true)
  isDeletedByApplicator      Boolean          @default(false)
  isDeletedByGrower          Boolean          @default(false)
  autoAcceptJobsByApplicator Boolean          @default(true)
  autoAcceptJobsByGrower     Boolean          @default(true)
  applicatorDeletedTill      DateTime? // Timestamp for when the applicator deleted till
  growerDeletedTill          DateTime? // Timestamp for when the grower deleted till
  email                      String? // Store invited email to handle the case when applicator does notexists in the system

  applicator User? @relation("Applicators", fields: [applicatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grower     User  @relation("Growers", fields: [growerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  pendingFarmPermission PendingFarmPermission[]
  Notification          Notification[]

  @@unique([applicatorId, growerId])
}

model Farm {
  id                    Int                     @id @default(autoincrement())
  name                  String?
  createdById           Int
  growerId              Int
  county                String?
  township              String?
  zipCode               String?
  isActive              Boolean
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  config                Json?
  farmImageUrl          String?
  stateId               Int?
  jdFarmId              String?
  createdBy             User                    @relation("FarmCreator", fields: [createdById], references: [id], onDelete: Cascade)
  grower                User                    @relation("FarmGrower", fields: [growerId], references: [id], onDelete: Cascade)
  state                 State?                  @relation(fields: [stateId], references: [id])
  permissions           FarmPermission[]
  fields                Field[]
  jobs                  Job[]
  pendingFarmPermission PendingFarmPermission[]
}

model FarmPermission {
  id           Int      @id @default(autoincrement())
  farmId       Int
  applicatorId Int
  canView      Boolean  @default(true)
  canEdit      Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  applicator   User     @relation(fields: [applicatorId], references: [id], onDelete: Cascade)
  farm         Farm     @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@unique([farmId, applicatorId])
}

model PendingFarmPermission {
  id        Int              @id @default(autoincrement())
  farmId    Int
  inviteId  Int
  canView   Boolean          @default(true)
  canEdit   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  farm      Farm             @relation(fields: [farmId], references: [id], onDelete: Cascade)
  invite    ApplicatorGrower @relation(fields: [inviteId], references: [id], onDelete: Cascade)

  @@unique([farmId, inviteId])
}

model Field {
  id            Int        @id @default(autoincrement())
  name          String?
  crop          String?
  acres         Decimal?
  legal         String?
  latitude      String?
  longitude     String?
  createdById   Int
  farmId        Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  config        Json?
  fieldImageUrl String?
  jdFieldId     String?
  createdBy     User       @relation("FieldCreator", fields: [createdById], references: [id], onDelete: Cascade)
  farm          Farm       @relation(fields: [farmId], references: [id], onDelete: Cascade)
  jobs          FieldJob[]
}

model TableView {
  id          Int       @id @default(autoincrement())
  createdById Int
  tableName   ViewTable
  config      Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  viewName    String?
  user        User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

model Job {
  id                  Int                 @id @default(autoincrement())
  token               String?             @unique
  tokenExpiresAt      DateTime? // Optional: Invite expiration time
  title               String
  type                JobType
  source              JobSource
  status              JobStatus           @default(PENDING)
  growerId            Int?
  applicatorId        Int?
  fieldWorkerId       Int?
  startDate           DateTime?
  endDate             DateTime?
  description         String?
  farmId              Int
  sensitiveAreas      String?
  adjacentCrops       String?
  specialInstructions String?
  attachments         Json?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  paidAt              DateTime?
  Bid                 Bid[]
  fields              FieldJob[]
  Invoice             Invoice?
  applicator          User?               @relation("ApplicatorJob", fields: [applicatorId], references: [id])
  farm                Farm                @relation(fields: [farmId], references: [id], onDelete: Cascade)
  fieldWorker         User?               @relation("FieldWorkerJob", fields: [fieldWorkerId], references: [id])
  grower              User?               @relation("GrowerJob", fields: [growerId], references: [id])
  jobActivities       JobActivity[]
  applicationFees     JobApplicationFee[]
  products            JobProduct[]
  Notification        Notification[]
  supportTickets      SupportTicket[]
  DroneFlightLog      DroneFlightLog[]
}

model Bid {
  id           Int                 @id @default(autoincrement())
  jobId        Int
  applicatorId Int
  status       BidStatus           @default(PENDING)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  description  String?
  applicator   User                @relation(fields: [applicatorId], references: [id], onDelete: Cascade)
  job          Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)
  bidFees      BidApplicationFee[]
  bidProducts  BidProduct[]
  Notification Notification[]

  @@unique([jobId, applicatorId])
}

model BidProduct {
  id          Int        @id @default(autoincrement())
  bidId       Int
  productId   Int
  bidRateAcre Decimal?
  bidPrice    Decimal?
  bid         Bid        @relation(fields: [bidId], references: [id], onDelete: Cascade)
  product     JobProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([bidId])
}

model BidApplicationFee {
  id             Int               @id @default(autoincrement())
  bidId          Int
  feeId          Int
  bidAmount      Decimal
  bid            Bid               @relation(fields: [bidId], references: [id], onDelete: Cascade)
  applicationFee JobApplicationFee @relation(fields: [feeId], references: [id], onDelete: Cascade)

  @@index([bidId])
}

model FieldJob {
  id          Int      @id @default(autoincrement())
  fieldId     Int
  jobId       Int
  actualAcres Decimal?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  field       Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([fieldId, jobId])
}

model JobProduct {
  id          Int          @id @default(autoincrement())
  jobId       Int
  totalAcres  Decimal
  price       Decimal
  productId   Int?
  name        String?
  perAcreRate Decimal?
  BidProduct  BidProduct[]
  job         Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  product     Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model JobApplicationFee {
  id                Int                 @id @default(autoincrement())
  jobId             Int
  description       String
  rateUoM           Decimal
  perAcre           Boolean
  BidApplicationFee BidApplicationFee[]
  job               Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model SupportTicket {
  id                    Int                     @id @default(autoincrement())
  createdById           Int
  subject               String                  @db.VarChar(255)
  description           String
  status                TicketStatus
  assigneeId            Int?
  jobId                 Int?
  category              TicketCategory
  priority              TicketPriority
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  assigneeUser          User?                   @relation("SupportTicketAssigned", fields: [assigneeId], references: [id], onDelete: Cascade)
  createdByUser         User                    @relation("SupportTicketCreated", fields: [createdById], references: [id], onDelete: Cascade)
  job                   Job?                    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  SupportTicketActivity SupportTicketActivity[]
  Notification          Notification[]

  @@index([jobId])
}

model WarrantyRegistration {
  id                 Int           @id @default(autoincrement())
  imageUrl           String?
  serialNumber       String
  equipmentType      EquipmentType
  isRegistered       Boolean       @default(false)
  documentUrl        String?
  warrantyExpiration DateTime
  createdById        Int
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  createdByUser      User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

model Product {
  id                          Int              @id @default(autoincrement())
  productName                 String
  baseProductName             String?
  productCategory             String?
  code                        Int?
  productType                 String?
  epaRegistration             String?
  perAcreRate                 Float?
  restrictedUse               Boolean          @default(false)
  category                    ProductCategory?
  company                     String?
  inventoryUnit               ProductUnit?
  appliedUnits                ProductUnit?
  density                     String?
  treatAsLiquid               Boolean          @default(false)
  canadSalesTax               Float?
  primaryNutrient             String?
  reentryInterval             Int?
  nutrients                   Json?
  jobPricePerMonth            Json             @default("{}")
  ticketPricePerMonth         Json             @default("{}")
  // jobPrice                    Float           @default(0)
  // ticketPrice                 Float           @default(0)
  personalProtectiveEquipment String?
  preHarvestInterval          String?
  comments                    String?
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  createdById                 Int
  // chemicalId                  Int?
  JobProduct                  JobProduct[]
  craetedBy                   User             @relation(fields: [createdById], references: [id], onDelete: Cascade)
  // chemical                    Chemical?       @relation(fields: [chemicalId], references: [id], onDelete: Cascade)
}

model State {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  abbreviation  String?         @unique // e.g. "IN"
  counties      County[]
  Farm          Farm[]
  User          User[]
  Certification Certification[]
}

model County {
  id        Int        @id @default(autoincrement())
  name      String
  stateId   Int
  state     State      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  townships Township[]

  @@unique([name, stateId])
}

model Township {
  id       Int    @id @default(autoincrement())
  name     String
  countyId Int
  county   County @relation(fields: [countyId], references: [id], onDelete: Cascade)

  @@unique([name, countyId])
}

model Notification {
  id             Int               @id @default(autoincrement())
  userId         Int
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviteId       Int?
  invite         ApplicatorGrower? @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  workerInviteId Int?
  workerInvite   ApplicatorWorker? @relation(fields: [workerInviteId], references: [id], onDelete: Cascade)
  ticketId       Int?
  ticket         SupportTicket?    @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  bidId          Int?
  bid            Bid?              @relation(fields: [bidId], references: [id], onDelete: Cascade)

  type   NotificationType
  isRead Boolean          @default(false)

  // Nullable foreign keys for referencing related entities
  jobId Int?
  job   Job? @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model DeviceToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ForecastCity {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobActivity {
  id            Int       @id @default(autoincrement())
  jobId         Int
  changedById   Int
  changedByRole UserRole
  oldStatus     JobStatus
  newStatus     JobStatus
  reason        String?
  createdAt     DateTime  @default(now())
  changedBy     User      @relation(fields: [changedById], references: [id])
  job           Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model ApplicatorUser {
  id           Int                        @id @default(autoincrement())
  applicatorId Int
  userId       Int
  createdAt    DateTime                   @default(now())
  inviteToken  String?                    @unique
  applicator   User                       @relation("ApplicatorToUsers", fields: [applicatorId], references: [id], onDelete: Cascade)
  user         User                       @relation("UserToApplicators", fields: [userId], references: [id], onDelete: Cascade)
  permissions  ApplicatorUserPermission[]

  @@unique([applicatorId, userId])
}

model Permission {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  scope     PermissionScope @default(ADMIN) // Formerly `type`
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  adminPermissions AdminPermission[]
  userPermissions  ApplicatorUserPermission[]
}

model ApplicatorUserPermission {
  id           Int            @id @default(autoincrement())
  userId       Int
  permissionId Int
  canView      Boolean        @default(true)
  canEdit      Boolean        @default(false)
  permission   Permission     @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         ApplicatorUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
}

model SupportTicketActivity {
  id            Int           @id @default(autoincrement())
  updatedById   Int?
  oldStatus     TicketStatus
  newStatus     TicketStatus
  reason        String?
  createdAt     DateTime      @default(now())
  ticketId      Int
  supportTicket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  updatedBy     User?         @relation(fields: [updatedById], references: [id])
}

model Invoice {
  id          Int       @id @default(autoincrement())
  jobId       Int       @unique
  totalAmount Decimal
  issuedAt    DateTime  @default(now())
  paidAt      DateTime?
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model AdminPermission {
  id           Int          @default(autoincrement())
  adminId      Int
  permissionId Int
  accessLevel  accessLevel?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  admin        User         @relation(fields: [adminId], references: [id], onDelete: Cascade)
  permission   Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id(id)
}

model ActivityLog {
  id         Int            @id @default(autoincrement())
  adminId    Int
  action     ActivityAction
  entityType String
  entityId   Int?
  details    String?
  metadata   Json? // <-- stores deleted record data
  timestamp  DateTime       @default(now())

  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model DroneFlightLog {
  id           Int       @id @default(autoincrement())
  jobId        Int
  droneId      String?
  startTime    DateTime?
  endTime      DateTime?
  geojsonData  Json // optional full GeoJSON
  mapImageUrl  String? // URL of map image in Azure Blob
  uploadedById Int // who uploaded the log
  createdAt    DateTime  @default(now())

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Chemical {
  id                    Int       @id @default(autoincrement())
  productName           String
  registrationNumber    String
  registrationType      String?
  companyNumber         String?
  companyName           String?
  firstRegistrationDate DateTime?
  status                String?
  statusDescription     String?
  statusGroup           String?
  statusDate            DateTime?
  useType               String?
  signalWord            String?
  rupFlag               Boolean?
  rupReason             String?
  pesticideType         String?
  pesticideCategory     String?
  physicalForm          String?
  ais                   String?
  pests                 String?
  sites                 String?
  team                  String?
  pmEmail               String?
  ridpNumberSort        String?
  usePattern            String?
  transferHistory       String?
  abns                  String?
  meTooFlag             Boolean?
  meTooRefs             String?
  maxLabelDate          DateTime?
  labelDates            String?
  labelNames            String?
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
  deletedAt             DateTime?
  // Product               Product[]
}

model City {
  id        Int     @id @default(autoincrement())
  name      String
  state     String?
  country   String
  latitude  Float
  longitude Float

  @@index([name])
}

model Certification {
  id             Int               @id @default(autoincrement())
  name           CertificationType
  licenseNumber  String
  stateId        Int?
  additionalInfo String?
  documentUrl    String? // Link to uploaded certificate
  expiryDate     DateTime?
  state          State?            @relation(fields: [stateId], references: [id])
  userId         Int
  user           User              @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Equipment {
  id           Int           @id @default(autoincrement())
  manufacturer String
  type         EquipmentType @default(DRONE)
  model        String
  nickname     String        @default("") // We'll handle defaulting to model in application logic
  serialNumber String        @unique
  userId       Int
  user         User          @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConnectedAccount {
  id           Int      @id @default(autoincrement())
  userId       Int
  provider     String // e.g., 'john_deere'
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum CertificationType {
  FAA_PART_107
  FAA_PART_137
  FAA_44807
  MEDICAL
  INSURANCE
  STATE_APPLICATOR_LICENSE
  STATE_BUSINESS_LICENSE
  STATE_CERTIFICATION
  WRITTEN_TEST
  ANNUAL_SAFETY
  DRONE_REGISTRATION
  CONDITIONS_LIMITATIONS
  OTHER
}

enum ActivityAction {
  LOGIN
  CREATE
  VIEW
  UPDATE
  DELETE
  ACTIVATE
  DEACTIVATE
}

enum PermissionScope {
  ADMIN
  USER
}

enum accessLevel {
  read
  write
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PermissionType {
  DASHBOARD
  JOBS
  MY_JOBS
  BIDDING_JOBS
  PENDING_APPROVALS
  REJECTED_JOBS
  GROWERS
  MY_GROWERS
  PENDING_INVITES
  EQUIPMENT
  WARRANTY_REGISTRATION
  SUPPORT_TICKETS
  FORUM
  REPORTS
  PILOTS_OPERATORS
  MY_PILOTS_OPERATORS
  PILOT_PENDING_INVITES
  SETTINGS
  PRODUCTS
  INTEGRATIONS
  USER_ADMIN
}

enum NotificationType {
  JOB_ASSIGNED
  JOB_ACCEPTED
  JOB_REJECTED
  PILOT_JOB_ACCEPTED
  PILOT_JOB_REJECTED
  JOB_REQUEST
  JOB_COMPLETED
  BID_PLACED
  BID_ACCEPTED
  PAYMENT_RECEIVED
  INVOICE_GENERATED
  FIELD_UPDATED
  SYSTEM_ALERT
  ACCOUNT_INVITATION
  ACCEPT_INVITE
  REJECT_INVITE
  PILOT_ACCEPT_INVITE
  PILOT_REJECT_INVITE
  TICKET_ASSIGNED
  TICKET_RESOLVED
}

enum ProfileStatus {
  INCOMPLETE
  COMPLETE
}

enum WorkerType {
  PILOT
  DRONE_OPERATOR
  FIELD_OPERATOR
  SCOUT
  MECHANIC
  ADVISOR
  COORDINATOR
}

enum ProductCategory {
  INSECTICIDE
  FUNGICIDE
  ADJUVANT
  HERBICIDE
  PGR
  DRY_FERTILIZER
  LIQUID_FERTILIZER
  SEED
  OTHER
}

enum ProductUnit {
  GALLON
  PINT
  QUART
  FLOZ
  TON
  POUND
  OUNCE
  CASE
  BAG
  BULK_BAG
  JUG
  UNIT
}

enum EquipmentType {
  DRONE
  SPRAYER
  CROP_DUSTER
  TRACTOR
  OTHER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UserRole {
  GROWER
  APPLICATOR
  WORKER
  APPLICATOR_USER
  SUPER_ADMIN
  SUPER_ADMIN_USER
}

enum InviteStatus {
  NOT_SENT
  PENDING
  ACCEPTED
  REJECTED
  DELETED_BY_APPLICATOR
  DELETED_BY_GROWER
}

enum ViewTable {
  GROWER
  JOB
  APPLICATOR
  PRODUCT
  WORKER
  USER_ADMIN
  PENDING_JOB
  REJECTED_JOB
}

enum JobType {
  AERIAL
  GROUND
}

enum JobSource {
  GROWER
  APPLICATOR
  BIDDING
}

enum JobStatus {
  PENDING
  REJECTED
  READY_TO_SPRAY
  ASSIGNED_TO_PILOT
  PILOT_REJECTED
  IN_PROGRESS
  SPRAYED
  INVOICED
  PAID
  OPEN_FOR_BIDDING
}

enum InviteInitiator {
  APPLICATOR
  GROWER
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "omitApi"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       Int
  createdAt DateTime @default(now())
  expiredAt DateTime
}

model User {
  id                     Int                    @id @default(autoincrement())
  profileImage           String?
  thumbnailProfileImage  String?
  firstName              String?
  lastName               String?
  fullName               String?                @default("")
  email                  String?                @unique
  phoneNumber            String?
  password               String?
  role                   UserRole
  businessName           String?
  experience             Decimal?
  address1               String?
  address2               String?
  state                  String?
  county                 String?
  township               String?
  zipCode                String?
  bio                    String?
  additionalInfo         String?
  profileStatus          ProfileStatus          @default(INCOMPLETE)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  applicators            ApplicatorGrower[]     @relation("Applicators")
  growers                ApplicatorGrower[]     @relation("Growers")
  applicatorWorkers      ApplicatorWorker[]     @relation("ApplicatorToWorkers")
  assignedWorkers        ApplicatorWorker[]     @relation("WorkerAssignments")
  farmsCreated           Farm[]                 @relation("FarmCreator")
  farms                  Farm[]                 @relation("FarmGrower")
  farmPermissions        FarmPermission[]
  fieldsCreated          Field[]                @relation("FieldCreator")
  applicatorJobs         Job[]                  @relation("ApplicatorJob")
  fieldWorkerJobs        Job[]                  @relation("FieldWorkerJob")
  growerJobs             Job[]                  @relation("GrowerJob")
  supportTicketsAssigned SupportTicket[]        @relation("SupportTicketAssigned")
  supportTicketsCreated  SupportTicket[]        @relation("SupportTicketCreated")
  tableViews             TableView[]
  warrantyRegistrations  WarrantyRegistration[]
}

model ApplicatorWorker {
  id                    Int        @id @default(autoincrement())
  applicatorId          Int
  workerId              Int
  workerType            WorkerType
  pilotLicenseNumber    String?
  businessLicenseNumber String?
  planeOrUnitNumber     String?
  perAcrePricing        Decimal?
  percentageFee         Decimal?
  dollarPerAcre         Decimal?
  autoAcceptJobs        Boolean    @default(false)
  canViewPricingDetails Boolean    @default(false)
  code                  String?
  lastLogin             DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  applicator            User       @relation("ApplicatorToWorkers", fields: [applicatorId], references: [id])
  worker                User       @relation("WorkerAssignments", fields: [workerId], references: [id])

  @@unique([applicatorId, workerId])
}

model ApplicatorGrower {
  id                     Int          @id @default(autoincrement())
  applicatorId           Int
  growerId               Int
  applicatorFirstName    String?
  applicatorLastName     String?
  growerFirstName        String?
  growerLastName         String?
  inviteStatus           InviteStatus @default(NOT_SENT)
  isArchivedByApplicator Boolean      @default(false)
  isArchivedByGrower     Boolean      @default(false)
  canManageFarms         Boolean      @default(true)

  applicator User @relation("Applicators", fields: [applicatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  grower     User @relation("Growers", fields: [growerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([applicatorId, growerId])
}

model Farm {
  id          Int              @id @default(autoincrement())
  name        String?
  createdById Int
  growerId    Int
  state       String?
  county      String?
  township    String?
  zipCode     String?
  isActive    Boolean
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdBy   User             @relation("FarmCreator", fields: [createdById], references: [id], onDelete: Cascade)
  grower      User             @relation("FarmGrower", fields: [growerId], references: [id], onDelete: Cascade)
  permissions FarmPermission[]
  fields      Field[]
  jobs        Job[]
}

model FarmPermission {
  id           Int      @id @default(autoincrement())
  farmId       Int
  applicatorId Int
  canView      Boolean  @default(true)
  canEdit      Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  applicator   User     @relation(fields: [applicatorId], references: [id], onDelete: Cascade)
  farm         Farm     @relation(fields: [farmId], references: [id], onDelete: Cascade)
}

model Field {
  id          Int        @id @default(autoincrement())
  name        String?
  crop        String?
  acres       Decimal?
  legal       String?
  latitude    String?
  longitude   String?
  createdById Int
  farmId      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation("FieldCreator", fields: [createdById], references: [id], onDelete: Cascade)
  farm        Farm       @relation(fields: [farmId], references: [id], onDelete: Cascade)
  jobs        FieldJob[]
}

model TableView {
  id          Int       @id @default(autoincrement())
  createdById Int
  tableName   ViewTable
  config      Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

model Job {
  id                  Int                 @id @default(autoincrement())
  title               String
  type                JobType
  source              JobSource
  status              JobStatus           @default(TO_BE_MAPPED)
  growerId            Int?
  applicatorId        Int?
  fieldWorkerId       Int?
  startDate           DateTime?
  endDate             DateTime?
  description         String?
  farmId              Int
  sensitiveAreas      String?
  adjacentCrops       String?
  specialInstructions String?
  attachments         Json?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  fields              FieldJob[]
  applicator          User?               @relation("ApplicatorJob", fields: [applicatorId], references: [id])
  farm                Farm                @relation(fields: [farmId], references: [id], onDelete: Cascade)
  fieldWorker         User?               @relation("FieldWorkerJob", fields: [fieldWorkerId], references: [id])
  grower              User?               @relation("GrowerJob", fields: [growerId], references: [id])
  applicationFees     JobApplicationFee[]
  products            JobProduct[]
  supportTickets      SupportTicket[]
}

model FieldJob {
  id          Int      @id @default(autoincrement())
  fieldId     Int
  jobId       Int
  actualAcres Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  field       Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([fieldId, jobId])
}

model JobProduct {
  id          Int     @id @default(autoincrement())
  jobId       Int
  name        String
  ratePerAcre Decimal
  totalAcres  Decimal
  price       Decimal
  job         Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model JobApplicationFee {
  id          Int     @id @default(autoincrement())
  jobId       Int
  description String
  rateUoM     Decimal
  perAcre     Boolean
  job         Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model SupportTicket {
  id            Int            @id @default(autoincrement())
  createdById   Int
  subject       String         @db.VarChar(255)
  description   String
  status        TicketStatus
  assigneeId    Int?
  jobId         Int?
  category      TicketCategory
  priority      TicketPriority
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  assigneeUser  User?          @relation("SupportTicketAssigned", fields: [assigneeId], references: [id], onDelete: Cascade)
  createdByUser User           @relation("SupportTicketCreated", fields: [createdById], references: [id], onDelete: Cascade)
  job           Job?           @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model WarrantyRegistration {
  id                 Int           @id @default(autoincrement())
  imageUrl           String?
  serialNumber       String
  equipmentType      EquipmentType
  isRegistered       Boolean       @default(false)
  documentUrl        String?
  warrantyExpiration DateTime
  createdById        Int
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  createdByUser      User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

model Product {
  id                          Int             @id @default(autoincrement())
  baseProductName             String
  productName                 String
  code                        Int?
  category                    ProductCategory
  restrictedUse               Boolean         @default(false)
  epaRegistration             String?
  company                     String?
  inventoryUnit               ProductUnit
  appliedUnits                ProductUnit
  perAcreRate                 Float?
  density                     String?
  treatAsLiquid               Boolean         @default(false)
  canadSalesTax               Float?
  primaryNutrient             String?
  reentryInterval             Int?
  nutrients                   Json?
  jobPricePerMonth            Json            @default("{}")
  ticketPricePerMonth         Json            @default("{}")
  jobPrice                    Float           @default(0)
  ticketPrice                 Float           @default(0)
  personalProtectiveEquipment String?
  preHarvestInterval          String?
  comments                    String?
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
}

model State {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  counties County[]
}

model County {
  id        Int        @id @default(autoincrement())
  name      String
  stateId   Int
  state     State      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  townships Township[]

  @@unique([name, stateId])
}

model Township {
  id       Int    @id @default(autoincrement())
  name     String
  countyId Int
  county   County @relation(fields: [countyId], references: [id], onDelete: Cascade)

  @@unique([name, countyId])
}

enum ProductCategory {
  INSECTICIDE
  FUNGICIDE
  ADJUVANT
  HERBICIDE
  PGR
  DRY_FERTILIZER
  LIQUID_FERTILIZER
  SEED
  OTHER
}

enum ProductUnit {
  GALLON
  PINT
  QUART
  FLOZ
  TON
  POUND
  OUNCE
  CASE
  BAG
  BULK_BAG
  JUG
  UNIT
}

enum EquipmentType {
  DRONE
  TRACTOR
  SPRAYER
  OTHER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UserRole {
  GROWER
  APPLICATOR
  WORKER
}

enum InviteStatus {
  NOT_SENT
  PENDING
  ACCEPTED
  REJECTED
}

enum ViewTable {
  GROWER
  JOB
  APPLICATOR
}

enum JobType {
  AERIAL
  GROUND
}

enum JobSource {
  GROWER
  APPLICATOR
  BIDDING
}

enum JobStatus {
  TO_BE_MAPPED
  READY_TO_SPRAY
  SPRAYED
  INVOICED
  PAID
  PENDING
  REJECTED
  OPEN_FOR_BIDDING
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "omitApi"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                    Int      @id @default(autoincrement())
  profileImage          String?
  thumbnailProfileImage String?
  firstName             String?
  lastName              String?
  fullName              String?  @default("")
  email                 String?  @unique
  phoneNumber           String?
  password              String?
  role                  UserRole
  businessName          String?
  experience            Decimal?
  address1              String?
  address2              String?
  state                 String?
  county                String?
  township              String?
  zipCode               String?
  bio                   String?
  additionalInfo        String?

  applicators   ApplicatorGrower[] @relation("Applcators")
  growers       ApplicatorGrower[] @relation("Growers")
  farmsCreated  Farm[]             @relation("FarmCreator")
  farms         Farm[]             @relation("FarmGrower")
  fieldsCreated Field[]            @relation("FieldCreator")
  tableViews    TableView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApplicatorGrower {
  id                  Int          @id @default(autoincrement())
  applicatorId        Int
  growerId            Int
  applicatorFirstName String?
  applicatorLastName  String?
  growerFirstName     String?
  growerLastName      String?
  inviteStatus        InviteStatus @default(NOT_SENT)
  isArchived          Boolean      @default(false)

  applicator User @relation("Applcators", fields: [applicatorId], references: [id])
  grower     User @relation("Growers", fields: [growerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([applicatorId, growerId])
}

model Farm {
  id          Int     @id @default(autoincrement())
  name        String?
  createdById Int
  growerId    Int
  state       String?
  county      String?
  township    String?
  zipCode     String?
  isActive    Boolean

  grower    User    @relation("FarmGrower", fields: [growerId], references: [id])
  createdBy User    @relation("FarmCreator", fields: [createdById], references: [id])
  fields    Field[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Field {
  id          Int      @id @default(autoincrement())
  name        String?
  crop        String?
  acres       Decimal?
  legal       String?
  latitude    String?
  longitude   String?
  createdById Int
  farmId      Int

  createdBy User @relation("FieldCreator", fields: [createdById], references: [id])
  farm      Farm @relation(fields: [farmId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TableView {
  id          Int       @id @default(autoincrement())
  createdById Int
  tableName   ViewTable
  config      Json // Store the view configuration as JSON
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [createdById], references: [id])
}

enum UserRole {
  GROWER
  APPLICATOR
  WORKER
}

enum InviteStatus {
  NOT_SENT
  PENDING
  ACCEPTED
  REJECTED
}

enum ViewTable {
  GROWER
  Job
}
